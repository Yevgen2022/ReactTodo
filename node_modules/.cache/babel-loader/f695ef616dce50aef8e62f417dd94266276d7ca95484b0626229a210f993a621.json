{"ast":null,"code":"var _jsxFileName = \"/Users/yoshkukov/PRACTICE/WORK/React/todo-react/src/components/ShowTask/ShowTask.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate, Outlet } from 'react-router-dom';\nimport './showTask.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShowTask = () => {\n  _s();\n  const [activeButton, setActiveButton] = useState('button1');\n  const [selectedRow, setSelectedRow] = useState(null); // State for the selected row\n\n  const navigate = useNavigate(); // Hook for navigation\n\n  // Handle button clicks\n  const handleButtonClick = buttonId => {\n    setActiveButton(buttonId);\n    if (buttonId === 'button1') {\n      navigate('show-individual-tasks'); // Navigate to ShowIndividualTasks\n    } else if (buttonId === 'button2') {\n      navigate('show-corporate-tasks'); // Navigate to ShowCorporateTasks\n    }\n  };\n\n  // Handle row selection.we pass it to the child component through the Outlet context. \n  const handleRowSelect = row => {\n    setSelectedRow(row);\n  };\n\n  // Handle edit button click\n  const handleEditClick = () => {\n    if (selectedRow) {\n      console.log('Editing row:', selectedRow);\n      // navigate(`/edit-task/${selectedRow.id}`);\n    }\n  };\n\n  // Handle delete button click\n  const handleDeleteClick = () => {\n    if (selectedRow) {\n      console.log('Deleting row:', selectedRow);\n      // dispatch(deleteTask(selectedRow.id)); // Assuming you have a deleteTask action\n      //   setSelectedRow(null); // Reset selected row after deletion\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"show-task-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `button ${activeButton === 'button1' ? 'active' : ''}`,\n        onClick: () => handleButtonClick('button1'),\n        children: \"Show individual tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `button ${activeButton === 'button2' ? 'active' : ''}`,\n        onClick: () => handleButtonClick('button2'),\n        children: \"Show corporate tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `button button-edit ${selectedRow ? 'active' : 'disabled'}`,\n        onClick: handleEditClick,\n        disabled: !selectedRow,\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `button button-delete ${selectedRow ? 'active' : 'disabled'}`,\n        onClick: handleDeleteClick,\n        disabled: !selectedRow,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(Outlet, {\n        context: {\n          onRowSelect: handleRowSelect\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(ShowTask, \"N2B+Y0dSt1h3A4ydtd6U4q34lcY=\", false, function () {\n  return [useNavigate];\n});\n_c = ShowTask;\nexport default ShowTask;\nvar _c;\n$RefreshReg$(_c, \"ShowTask\");","map":{"version":3,"names":["React","useState","useNavigate","Outlet","jsxDEV","_jsxDEV","ShowTask","_s","activeButton","setActiveButton","selectedRow","setSelectedRow","navigate","handleButtonClick","buttonId","handleRowSelect","row","handleEditClick","console","log","handleDeleteClick","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","context","onRowSelect","_c","$RefreshReg$"],"sources":["/Users/yoshkukov/PRACTICE/WORK/React/todo-react/src/components/ShowTask/ShowTask.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate, Outlet } from 'react-router-dom';\nimport './showTask.css';\n\nconst ShowTask = () => {\n  const [activeButton, setActiveButton] = useState('button1');\n  const [selectedRow, setSelectedRow] = useState(null); // State for the selected row\n\n  const navigate = useNavigate(); // Hook for navigation\n\n  // Handle button clicks\n  const handleButtonClick = (buttonId) => {\n    setActiveButton(buttonId);\n    if (buttonId === 'button1') {\n      navigate('show-individual-tasks'); // Navigate to ShowIndividualTasks\n    } else if (buttonId === 'button2') {\n      navigate('show-corporate-tasks'); // Navigate to ShowCorporateTasks\n    }\n  };\n\n  // Handle row selection.we pass it to the child component through the Outlet context. \n  const handleRowSelect = (row) => {\n    setSelectedRow(row);\n  };\n\n  // Handle edit button click\n  const handleEditClick = () => {\n    if (selectedRow) {\n      console.log('Editing row:', selectedRow);\n      // navigate(`/edit-task/${selectedRow.id}`);\n    }\n  };\n\n  // Handle delete button click\n  const handleDeleteClick = () => {\n    if (selectedRow) {\n      console.log('Deleting row:', selectedRow);\n      // dispatch(deleteTask(selectedRow.id)); // Assuming you have a deleteTask action\n   //   setSelectedRow(null); // Reset selected row after deletion\n    }\n  };\n\n  return (\n    <div className=\"show-task-container\">\n      <div className=\"button-panel\">\n        <button\n          className={`button ${activeButton === 'button1' ? 'active' : ''}`}\n          onClick={() => handleButtonClick('button1')}\n        >\n          Show individual tasks\n        </button>\n        <button\n          className={`button ${activeButton === 'button2' ? 'active' : ''}`}\n          onClick={() => handleButtonClick('button2')}\n        >\n          Show corporate tasks\n        </button>\n        <button\n          className={`button button-edit ${selectedRow ? 'active' : 'disabled'}`}\n          onClick={handleEditClick}\n          disabled={!selectedRow}\n        >\n          Edit\n        </button>\n        <button\n          className={`button button-delete ${selectedRow ? 'active' : 'disabled'}`}\n          onClick={handleDeleteClick}\n          disabled={!selectedRow}\n        >\n          Delete\n        </button>\n      </div>\n      <div className=\"content\">\n        <Outlet context={{ onRowSelect: handleRowSelect }} /> {/* Render child component with context */}\n      </div>\n    </div>\n  );\n};\n\nexport default ShowTask;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}