{"ast":null,"code":"var _jsxFileName = \"/Users/yoshkukov/PRACTICE/WORK/React/todo-react/src/components/ShowTask/ShowTask.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate, Outlet } from 'react-router-dom';\nimport './showTask.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShowTask = () => {\n  _s();\n  // Local state for active button and selected row\n  const [activeButton, setActiveButton] = useState('button1');\n  const [selectedRow, setSelectedRow] = useState(null); // State for the selected row\n\n  const navigate = useNavigate(); // Hook for navigation\n\n  // Redux state\n  const tasks = useSelector(state => state.taskController);\n  console.log(tasks);\n\n  // Handle button clicks\n  const handleButtonClick = buttonId => {\n    setActiveButton(buttonId);\n    if (buttonId === 'button1') {\n      navigate('show-individual-tasks'); // Navigate to ShowIndividualTasks\n    } else if (buttonId === 'button2') {\n      navigate('show-corporate-tasks'); // Navigate to ShowCorporateTasks\n    }\n  };\n\n  // Handle row selection\n  const handleRowSelect = row => {\n    setSelectedRow(row);\n  };\n\n  // Handle edit button click\n  const handleEditClick = () => {\n    if (selectedRow) {\n      // Add logic to edit the selected row\n      console.log('Editing row:', selectedRow);\n      // For example, navigate to an edit page with the selected row id\n      navigate(`/edit-task/${selectedRow.id}`);\n    }\n  };\n\n  // Handle delete button click\n  const handleDeleteClick = () => {\n    if (selectedRow) {\n      // Add logic to delete the selected row\n      console.log('Deleting row:', selectedRow);\n      // Example: Dispatch an action to delete the selected row\n      // dispatch(deleteTask(selectedRow.id));\n      setSelectedRow(null); // Reset selected row after deletion\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"show-task-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `button ${activeButton === 'button1' ? 'active' : ''}`,\n        onClick: () => handleButtonClick('button1'),\n        children: \"Show individual tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `button ${activeButton === 'button2' ? 'active' : ''}`,\n        onClick: () => handleButtonClick('button2'),\n        children: \"Show corporate tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `button button-edit ${selectedRow ? 'active' : 'disabled'}`,\n        onClick: handleEditClick,\n        disabled: !selectedRow,\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `button button-delete ${selectedRow ? 'active' : 'disabled'}`,\n        onClick: handleDeleteClick,\n        disabled: !selectedRow,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ShowTask, \"mEsXnn1p0TMnXGwdHnZzveS/KRM=\", false, function () {\n  return [useNavigate, useSelector];\n});\n_c = ShowTask;\nexport default ShowTask;\nvar _c;\n$RefreshReg$(_c, \"ShowTask\");","map":{"version":3,"names":["React","useState","useSelector","useNavigate","Outlet","jsxDEV","_jsxDEV","ShowTask","_s","activeButton","setActiveButton","selectedRow","setSelectedRow","navigate","tasks","state","taskController","console","log","handleButtonClick","buttonId","handleRowSelect","row","handleEditClick","id","handleDeleteClick","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c","$RefreshReg$"],"sources":["/Users/yoshkukov/PRACTICE/WORK/React/todo-react/src/components/ShowTask/ShowTask.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate, Outlet } from 'react-router-dom';\nimport './showTask.css';\n\nconst ShowTask = () => {\n  // Local state for active button and selected row\n  const [activeButton, setActiveButton] = useState('button1');\n  const [selectedRow, setSelectedRow] = useState(null); // State for the selected row\n\n  const navigate = useNavigate(); // Hook for navigation\n\n  // Redux state\n  const tasks = useSelector((state) => state.taskController);\n  console.log(tasks);\n\n  // Handle button clicks\n  const handleButtonClick = (buttonId) => {\n    setActiveButton(buttonId);\n    if (buttonId === 'button1') {\n      navigate('show-individual-tasks'); // Navigate to ShowIndividualTasks\n    } else if (buttonId === 'button2') {\n      navigate('show-corporate-tasks'); // Navigate to ShowCorporateTasks\n    }\n  };\n\n  // Handle row selection\n  const handleRowSelect = (row) => {\n    setSelectedRow(row);\n  };\n\n  // Handle edit button click\n  const handleEditClick = () => {\n    if (selectedRow) {\n      // Add logic to edit the selected row\n      console.log('Editing row:', selectedRow);\n      // For example, navigate to an edit page with the selected row id\n      navigate(`/edit-task/${selectedRow.id}`);\n    }\n  };\n\n  // Handle delete button click\n  const handleDeleteClick = () => {\n    if (selectedRow) {\n      // Add logic to delete the selected row\n      console.log('Deleting row:', selectedRow);\n      // Example: Dispatch an action to delete the selected row\n      // dispatch(deleteTask(selectedRow.id));\n      setSelectedRow(null); // Reset selected row after deletion\n    }\n  };\n\n  return (\n    <div className=\"show-task-container\">\n  <div className=\"button-panel\">\n    <button\n      className={`button ${activeButton === 'button1' ? 'active' : ''}`}\n      onClick={() => handleButtonClick('button1')}\n    >\n      Show individual tasks\n    </button>\n    <button\n      className={`button ${activeButton === 'button2' ? 'active' : ''}`}\n      onClick={() => handleButtonClick('button2')}\n    >\n      Show corporate tasks\n    </button>\n    <button\n      className={`button button-edit ${selectedRow ? 'active' : 'disabled'}`}\n      onClick={handleEditClick}\n      disabled={!selectedRow}\n    >\n      Edit\n    </button>\n    <button\n      className={`button button-delete ${selectedRow ? 'active' : 'disabled'}`}\n      onClick={handleDeleteClick}\n      disabled={!selectedRow}\n    >\n      Delete\n    </button>\n  </div>\n  <div className=\"content\">\n    <Outlet /> {/* Render child component */}\n  </div>\n</div>\n\n  );\n};\n\nexport default ShowTask;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}